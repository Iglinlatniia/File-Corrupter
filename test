import tkinter as tk
from tkinter import filedialog
import os

def open_file_dialog():
    global file_path
    file_path = filedialog.askopenfilename()
    
    if file_path:
        create_new_window(file_path)

def corrupt_file(file_path):
    if not file_path or not os.path.isfile(file_path) or not os.access(file_path, os.W_OK):
        print(f"File {file_path} does not exist or is not writable.")
        return
    
    backup_path = f"{file_path}.bak"

    if not os.path.exists(backup_path):
        with open(file_path, 'rb') as original_file:
            with open(backup_path, 'wb') as backup_file:
                while True:
                    data = original_file.read(1024)
                    if not data:
                        break
                    backup_file.write(data)
    
    with open(file_path, 'r+b') as file:
        while True:
            data = file.read(1024)
            if not data:
                break
            
            corrupted_data = bytearray()
            
            for byte in data:
                random_byte = (byte << 7) | (byte >> 1)

                corrupted_byte = random_byte % 256
                
                corrupted_data.append(corrupted_byte)
            
            file.seek(-len(data), os.SEEK_CUR)
            file.write(corrupted_data)
    
    print(f"File {file_path} has been corrupted. Original data backed up to {backup_path}.")

def recover_file(file_path):
    backup_path = f"{file_path}.bak"
    
    if not backup_path or not os.path.isfile(backup_path):
        print(f"No backup file found at {backup_path}")
        return
    
    with open(file_path, 'wb') as original_file:
        with open(backup_path, 'rb') as backup_file:
            while True:
                data = backup_file.read(1024)
                if not data:
                    break
                original_file.write(data)
    
    print(f"File {file_path} has been recovered from the backup.")

def delete_file(file_path):
    try:
        os.remove(file_path)
        print("File deleted successfully.")
    except Exception as e:
        print(f"Error deleting file: {e}")

def create_new_window(file_path):
    global new_root
    
    new_root = tk.Tk()
    new_root.title("File Operations")

    width, height = 300, 200
    screen_width = new_root.winfo_screenwidth()  
    screen_height = new_root.winfo_screenheight()
    x = (screen_width - width) // 2
    y = (screen_height - height) // 2
    new_root.geometry(f"{width}x{height}+{x}+{y}")

    tk.Button(new_root, text="Corrupt", command=lambda: corrupt_file(file_path)).pack(pady=10)
    tk.Button(new_root, text="Recover", command=lambda: recover_file(file_path)).pack(pady=10)
    tk.Button(new_root, text="Delete", command=lambda: delete_file(file_path)).pack(pady=10)
    tk.Button(new_root, text="Quit", command=new_root.destroy).pack(pady=10)

root = tk.Tk()
root.title("Select File")

width, height = 300, 200
screen_width = root.winfo_screenwidth()  
screen_height = root.winfo_screenheight()
x = (screen_width - width) // 2
y = (screen_height - height) // 2
root.geometry(f"{width}x{height}+{x}+{y}")

tk.Button(root, text="Select", command=open_file_dialog).pack(pady=50)

root.mainloop()
